// <auto-generated />
using System;
using Ingestion.Infraestructura.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ingestion.Infraestructura.Migrations
{
    [DbContext(typeof(ImagenDbContext))]
    partial class ImagenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.AtributosImagenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contraste")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Es3D")
                        .HasColumnType("boolean");

                    b.Property<string>("FaseEscaner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Resolucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AtributosImagen");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ContextoProcesalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Etapa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContextosProcesales");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.DemografiaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Etnicidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrupoEdad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Demografias");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.EntornoClinicoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TipoAmbiente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntornosClinicos");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.HistorialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CondicionesPrevias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Diabetico")
                        .HasColumnType("boolean");

                    b.Property<bool>("Fumador")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Historiales");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ImagenAnonimizadaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImagenEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImagenId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImagenProcesadaPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImagenEntityId");

                    b.HasIndex("ImagenId");

                    b.ToTable("ImagenAnonimizadas");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AtributosImagenId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContextoProcesalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntornoClinicoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadatosId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoImagenId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AtributosImagenId");

                    b.HasIndex("ContextoProcesalId");

                    b.HasIndex("EntornoClinicoId");

                    b.HasIndex("MetadatosId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoImagenId");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.MetadatoGeneradosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImagenId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImagenId");

                    b.ToTable("MetadatosGenerados");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.MetadatosEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntornoClinicoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImagenEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImagenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntornoClinicoId");

                    b.HasIndex("ImagenEntityId");

                    b.ToTable("Metadatos");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ModalidadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Modalidades");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.PacienteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DemografiaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HistorialId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenAnonimo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemografiaId");

                    b.HasIndex("HistorialId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.PatologiaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patologias");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.RegionAnatomicaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegionesAnatomicas");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.SintomaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sintomas");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.TipoImagenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModalidadId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatologiaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionAnatomicaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ModalidadId");

                    b.HasIndex("PatologiaId");

                    b.HasIndex("RegionAnatomicaId");

                    b.ToTable("TiposImagen");
                });

            modelBuilder.Entity("MetadatosEntitySintomaEntity", b =>
                {
                    b.Property<Guid>("MetadatosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SintomasId")
                        .HasColumnType("uuid");

                    b.HasKey("MetadatosId", "SintomasId");

                    b.HasIndex("SintomasId");

                    b.ToTable("MetadatosSintomas", (string)null);
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ImagenAnonimizadaEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", null)
                        .WithMany("ImagenesAnonimizadas")
                        .HasForeignKey("ImagenEntityId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", "Imagen")
                        .WithMany()
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.AtributosImagenEntity", "AtributosImagen")
                        .WithMany()
                        .HasForeignKey("AtributosImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ContextoProcesalEntity", "ContextoProcesal")
                        .WithMany()
                        .HasForeignKey("ContextoProcesalId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.EntornoClinicoEntity", "EntornoClinico")
                        .WithMany()
                        .HasForeignKey("EntornoClinicoId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.MetadatosEntity", "Metadatos")
                        .WithMany()
                        .HasForeignKey("MetadatosId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.PacienteEntity", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.TipoImagenEntity", "TipoImagen")
                        .WithMany()
                        .HasForeignKey("TipoImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AtributosImagen");

                    b.Navigation("ContextoProcesal");

                    b.Navigation("EntornoClinico");

                    b.Navigation("Metadatos");

                    b.Navigation("Paciente");

                    b.Navigation("TipoImagen");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.MetadatoGeneradosEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", "Imagen")
                        .WithMany()
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.MetadatosEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.EntornoClinicoEntity", "EntornoClinico")
                        .WithMany()
                        .HasForeignKey("EntornoClinicoId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", null)
                        .WithMany("MetadatosGenerados")
                        .HasForeignKey("ImagenEntityId");

                    b.Navigation("EntornoClinico");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.PacienteEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.DemografiaEntity", "Demografia")
                        .WithMany()
                        .HasForeignKey("DemografiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.HistorialEntity", "Historial")
                        .WithMany()
                        .HasForeignKey("HistorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demografia");

                    b.Navigation("Historial");
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.TipoImagenEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.ModalidadEntity", "Modalidad")
                        .WithMany()
                        .HasForeignKey("ModalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.PatologiaEntity", "Patologia")
                        .WithMany()
                        .HasForeignKey("PatologiaId");

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.RegionAnatomicaEntity", "RegionAnatomica")
                        .WithMany()
                        .HasForeignKey("RegionAnatomicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modalidad");

                    b.Navigation("Patologia");

                    b.Navigation("RegionAnatomica");
                });

            modelBuilder.Entity("MetadatosEntitySintomaEntity", b =>
                {
                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.MetadatosEntity", null)
                        .WithMany()
                        .HasForeignKey("MetadatosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingestion.Infraestructura.Persistencia.Entidades.SintomaEntity", null)
                        .WithMany()
                        .HasForeignKey("SintomasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingestion.Infraestructura.Persistencia.Entidades.ImagenEntity", b =>
                {
                    b.Navigation("ImagenesAnonimizadas");

                    b.Navigation("MetadatosGenerados");
                });
#pragma warning restore 612, 618
        }
    }
}
