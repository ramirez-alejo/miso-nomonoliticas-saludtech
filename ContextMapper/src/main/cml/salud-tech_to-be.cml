Domain RecaudacionImagenes {
    domainVisionStatement = "Recolectar y gestionar imágenes médicas de forma segura y eficiente desde múltiples proveedores de salud"

    Subdomain GestionProveedores {
        type = CORE_DOMAIN
        domainVisionStatement = "Gestionar relaciones con centros de salud y laboratorios para la obtención de datos médicos"

        Entity ProveedorSalud {
            String id
            String nombre
            String pais
            String tipo // hospital, clínica, laboratorio
            String estado // activo, inactivo
            Date fechaIntegracion
        }
    }

    Subdomain Ingestion {
        type = CORE_DOMAIN
        domainVisionStatement = "Gestionar la importación segura de datos desde infraestructuras on-premise a la nube"

        Entity Imagen {
            String id
            String version
            String url
            String imagenProcesadaPath
            - TipoImagen tipoImagen
            - AtributosImagen atributosImagen
            - ContextoProcesal contextoProcesal
            - Metadatos metadatos
            - Paciente paciente
        }

        Entity TipoImagen {
            - Modalidad modalidad
            - RegionAnatomica regionAnatomica
            - Patologia patologia
        }

        Entity Modalidad {
            String nombre
            String descripcion
        }

        Entity RegionAnatomica {
            String nombre
            String descripcion
        }

        Entity Patologia {
            String descripcion
        }

        Entity AtributosImagen {
            String resolucion
            String contraste
            boolean es3D
            String faseEscaner
        }

        Entity ContextoProcesal {
            String etapa
        }

        Entity Metadatos {
            - EntornoClinico entornoClinico
            List<Sintoma> sintomas
            Map<String, String> tags
        }

        Entity Paciente {
            - Demografia demografia
            - Historial historial
            String tokenAnonimo
        }

        Entity Demografia {
            String grupoEdad
            String sexo
            String etnicidad
        }

        Entity Historial {
            boolean fumador
            boolean diabetico
            List<String> condicionesPrevias
        }

        Entity EntornoClinico {
            String tipoAmbiente
        }

        Entity Sintoma {
            String descripcion
        }
    }

    Subdomain Anonimizacion {
        type = CORE_DOMAIN
        domainVisionStatement = "Garantizar la eliminación segura de información sensible en imágenes médicas"

        Entity Anonimizar {
            String imagenId
            String version
            String ubicacionImagen
            String imagenProcesadaPath
            String detalleAnonimizacion
            - TipoImagen tipoImagen
            - AtributosImagen atributosImagen
        }
    }

    Subdomain Metadata {
        type = CORE_DOMAIN
        domainVisionStatement = "Extraer y gestionar metadatos de las imágenes médicas"

        Entity Metadata {
            String imagenId
            String version
            String resolucion
            String contraste
            boolean es3D
            String faseEscaner
            Date timestamp
            Map<String, String> tags
            - TipoImagen tipoImagen
            - AtributosImagen atributosImagen
            - ContextoProcesal contextoProcesal
            - Demografia demografia
            - Historial historial
            - EntornoClinico entornoClinico
            List<Sintoma> sintomas
        }
    }
}

Domain Procesamiento {
    domainVisionStatement = "Procesar y enriquecer imágenes médicas con metadatos y etiquetas para su uso en IA"

    Subdomain ProcesadorImagenes {
        type = CORE_DOMAIN
        domainVisionStatement = "Ejecutar pipelines especializados para diferentes tipos de imágenes médicas"

        Entity Pipeline {
            String id
            String tipo
            String modalidad
            String regionAnatomica
            String version
        }
    }

    Subdomain Etiquetado {
        type = CORE_DOMAIN
        domainVisionStatement = "Extraer y gestionar metadatos y etiquetas de las imágenes médicas"

        Entity Metadatos {
            String id
            String grupoDemografico
            String entornoClinico
            String fase
            String condicion
        }
    }

    Subdomain Almacenamiento {
        type = GENERIC_SUBDOMAIN
        domainVisionStatement = "Gestionar el almacenamiento seguro y aislado de datos por proveedor"

        Entity Contenedor {
            String id
            String proveedorId
            String region
            String tipo // privado, compartido
            Double capacidad
        }
    }
}

Domain Distribucion {
    domainVisionStatement = "Proporcionar acceso seguro y eficiente a datos médicos para entrenamiento de IA"

    Subdomain GestionClientes {
        type = CORE_DOMAIN
        domainVisionStatement = "Administrar cuentas de cliente y niveles de servicio"

        Entity Cliente {
            String id
            String nombre
            String tipo // Standard, Pro, Enterprise
            Date fechaRegistro
            String estado
        }
    }

    Subdomain Consulta {
        type = CORE_DOMAIN
        domainVisionStatement = "Gestionar búsqueda y acceso a datos según nivel de suscripción"

        Entity ImagenMedica {
            String id
            String url
            String estado
            Date fechaCreacion
            - TipoImagen tipoImagen
            - AtributosImagen atributosImagen
        }

        Entity ImagenDemografia {
            String id
            String imagenId
            - Demografia demografia
        }

        Entity ImagenModalidad {
            String id
            String imagenId
            - Modalidad modalidad
            - RegionAnatomica regionAnatomica
        }

        Entity ImagenMedicaConsultaConFiltros {
            - Demografia demografia
            - TipoImagen tipoImagen
        }

        Entity ImagenConsultaSagaState {
            String sagaId
            String status
            Date createdAt
            Date completedAt
            String errorMessage
            - Demografia demografiaFilter
            - TipoImagen tipoImagenFilter
            List<String> demografiaResults
            List<String> modalidadResults
            List<String> intersectedIds
            List<ImagenMedica> finalResults
        }
    }

    Subdomain AmbienteVirtual {
        type = CORE_DOMAIN
        domainVisionStatement = "Provisionar y gestionar ambientes cloud dedicados para clientes Pro y Enterprise"

        Entity Ambiente {
            String id
            String clienteId
            String tipo
            String estado
            Date fechaCreacion
        }
    }

    Subdomain Seguridad {
        type = SUPPORTING_DOMAIN
        domainVisionStatement = "Garantizar cumplimiento HIPAA y seguridad en el acceso a datos"

        Entity Auditoria {
            String id
            String operacion
            String usuario
            Date fecha
            String resultado
        }
    }

    Subdomain Atribucion {
        type = CORE_DOMAIN
        domainVisionStatement = "Gestionar la trazabilidad y compensación por el uso de imágenes médicas a los proveedores"

        Entity UsoImagen {
            String id
            String imagenId
            String proveedorId
            String clienteId
            Date fechaUso
            String tipoUso // descarga, consulta, entrenamiento
            Double compensacion
        }

        Entity CompensacionProveedor {
            String id
            String proveedorId
            Date periodoInicio
            Date periodoFin
            Double montoTotal
            String estado // pendiente, pagado, cancelado
            Date fechaPago
        }
    }
}

BoundedContext ContextoIngestion implements GestionProveedores, Ingestion {
    Module seguridad {
        Aggregate AccesoProveedor {
            Entity Credenciales {
                String usuario
                String tipoAutenticacion // MFA, SSO
                String estado
                Date ultimoAcceso
            }
            Entity PermisosCarga {
                String tipoPermiso // read, write, admin
                String alcance // all, Proveedores
                Date expiracion
            }
        }
    }
    
    Module sagas {
        Aggregate ImagenIngestionSaga {
            Entity ImagenIngestionSagaState {
                String sagaId
                String status
                Date createdAt
                Date completedAt
                String errorMessage
                String imagenId
                boolean anonimizacionCompleted
                boolean metadataCompleted
                String imagenProcesadaPath
                Map<String, String> tags
            }
        }
    }
}

BoundedContext ContextoAnonimizacion implements Anonimizacion {
    Module persistencia {
        Aggregate AnonimizacionAggregate {
            Entity Anonimizar {
                String imagenId
                String version
                String ubicacionImagen
                String imagenProcesadaPath
                String detalleAnonimizacion
            }
        }
    }
    
    Module comandos {
        Aggregate ComandosAnonimizacion {
            Entity EliminarAnonimizacion {
                String sagaId
                String imagenId
                String version
            }
        }
    }
    
    Module eventos {
        Aggregate EventosAnonimizacion {
            Entity Anonimizada {
                String sagaId
                String imagenId
                boolean success
                String errorMessage
                String imagenProcesadaPath
            }
            
            Entity AnonimizacionEliminada {
                String sagaId
                String imagenId
                boolean success
                String errorMessage
            }
        }
    }
}

BoundedContext ContextoMetadata implements Metadata {
    Module persistencia {
        Aggregate MetadataAggregate {
            Entity Metadata {
                String imagenId
                String version
                Map<String, String> tags
                Date timestamp
            }
        }
    }
    
    Module comandos {
        Aggregate ComandosMetadata {
            Entity EliminarMetadata {
                String sagaId
                String imagenId
                String version
            }
            
            Entity GenerarMetadata {
                String sagaId
                String imagenId
                String version
            }
        }
    }
    
    Module eventos {
        Aggregate EventosMetadata {
            Entity MetadataGenerada {
                String sagaId
                String imagenId
                boolean success
                String errorMessage
                Map<String, String> tags
            }
            
            Entity MetadataEliminada {
                String sagaId
                String imagenId
                boolean success
                String errorMessage
            }
        }
    }
}

BoundedContext ContextoProcesamiento implements ProcesadorImagenes, Etiquetado {
    Module clasificacion {
        Aggregate Modalidad {
            Entity TipoModalidad {
                String codigo // RX, TC, RM
                String nombre
                String descripcion
                Boolean activo
            }
            Entity ConfiguracionProcesamiento {
                String parametros
                String versionAlgoritmo
            }
        }
        
        Aggregate RegionAnatomica {
            Entity TipoRegion {
                String codigo
                String nombre
                String descripcion
                String sistemaCodificacion
            }
            Entity Localizacion {
                String coordenadas
                String referencias
            }
        }
        
        Aggregate Diagnostico {
            Entity Patologia {
                String codigo
                String nombre
                String descripcion
                String clasificacionICD
            }
            Entity Hallazgos {
                String descripcion
                String severidad
                String confianza
            }
        }
    }
}

BoundedContext ContextoConsulta implements Consulta {
    Module sagas {
        Aggregate ImagenConsultaSaga {
            Entity ImagenConsultaSagaState {
                String sagaId
                String status
                Date createdAt
                Date completedAt
                String errorMessage
                - Demografia demografiaFilter
                - TipoImagen tipoImagenFilter
                List<String> demografiaResults
                List<String> modalidadResults
                List<String> intersectedIds
                List<ImagenMedica> finalResults
            }
        }
    }
    
    Module comandos {
        Aggregate ComandosConsulta {
            Entity ImagenConsultaDemografiaRequestCommand {
                String sagaId
                - Demografia filter
            }
            
            Entity ImagenConsultaModalidadRequestCommand {
                String sagaId
                - TipoImagen filter
            }
            
            Entity ImagenConsultaDataRequestCommand {
                String sagaId
                List<String> imagenIds
            }
        }
    }
    
    Module eventos {
        Aggregate EventosConsulta {
            Entity ImagenConsultaDemografiaResponseEvent {
                String sagaId
                boolean success
                String errorMessage
                List<String> imagenIds
            }
            
            Entity ImagenConsultaModalidadResponseEvent {
                String sagaId
                boolean success
                String errorMessage
                List<String> imagenIds
            }
            
            Entity ImagenConsultaDataResponseEvent {
                String sagaId
                boolean success
                String errorMessage
                List<ImagenMedica> imagenes
            }
            
            Entity ImagenConsultaCompletedEvent {
                String sagaId
                boolean success
                String errorMessage
                List<ImagenMedica> imagenes
            }
        }
    }
}

BoundedContext ContextoConsultaDemografia implements Consulta {
    Module persistencia {
        Aggregate DemografiaAggregate {
            Entity ImagenDemografia {
                String id
                String imagenId
                - Demografia demografia
            }
        }
    }
}

BoundedContext ContextoConsultaModalidad implements Consulta {
    Module persistencia {
        Aggregate ModalidadAggregate {
            Entity ImagenModalidad {
                String id
                String imagenId
                - Modalidad modalidad
                - RegionAnatomica regionAnatomica
            }
        }
    }
}

BoundedContext ContextoDistribucion implements GestionClientes, AmbienteVirtual, Atribucion {
    Module ambienteVirtual {
        Aggregate SeguridadAmbiente {
            Entity ControlAcceso {
                String tipoAmbiente // Pro, Enterprise
                String politicaSeguridad
                String nivelAislamiento
                String regionCloud
            }
            Entity Auditoria {
                String tipoOperacion
                Date timestamp
                String usuario
                String resultado
            }
            Entity ConfiguracionRed {
                String vpcConfig
                String firewallRules
                String encryptionKeys
            }
        }
    }
}

BoundedContext ContextoSeguridad implements Seguridad {
    Module cumplimiento {
        Aggregate HIPAA {
            Entity RegistroAuditoria {
                String tipoEvento
                Date timestamp
                String usuario
                String recurso
                String resultado
            }
            Entity PoliticaPrivacidad {
                String version
                Date fechaEfectiva
                String alcance
                Boolean activa
            }
        }
    }
}

ContextMap SaludTechFuturoMap {
    state = TO_BE
    
    contains ContextoIngestion
    contains ContextoAnonimizacion
    contains ContextoMetadata
    contains ContextoProcesamiento
    contains ContextoConsulta
    contains ContextoConsultaDemografia
    contains ContextoConsultaModalidad
    contains ContextoDistribucion
    contains ContextoSeguridad

    ContextoIngestion [D] <- [U] ContextoSeguridad
    ContextoAnonimizacion [D] <- [U] ContextoSeguridad
    ContextoMetadata [D] <- [U] ContextoSeguridad
    ContextoProcesamiento [D] <- [U] ContextoSeguridad
    ContextoConsulta [D] <- [U] ContextoSeguridad
    ContextoConsultaDemografia [D] <- [U] ContextoSeguridad
    ContextoConsultaModalidad [D] <- [U] ContextoSeguridad
    ContextoDistribucion [D] <- [U] ContextoSeguridad

    /* Relaciones de Ingestion */
    ContextoAnonimizacion [P]<->[P] ContextoIngestion
    ContextoMetadata [P]<->[P] ContextoIngestion

    /* Relaciones de Consulta */
    ContextoConsultaDemografia [P]<->[P] ContextoConsulta
    ContextoConsultaModalidad [P]<->[P] ContextoConsulta

    /* Protege el procesamiento de cambios en formatos de ingesta y protocolos de proveedores */
    ContextoProcesamiento [ACL]<-[U] ContextoIngestion

    /* Mantiene estabilidad en las interfaces de acceso a datos para clientes */
    ContextoConsulta [ACL]<-[U] ContextoProcesamiento

    /* Aísla cambios en la gestión de proveedores del sistema de distribución */
    ContextoDistribucion [ACL]<-[U] ContextoIngestion
}

UserStory RegistrarProveedor {
    As a "Administrador"
        I want to "registrar" a "ProveedorSalud"
    so that "pueda comenzar a recibir imágenes médicas de un nuevo centro de salud."
}

UserStory IngestionImagen {
    As a "Ingeniero de Datos"
        I want to "iniciar" a "ImagenIngestionSaga"
    so that "pueda procesar, anonimizar y extraer metadatos de una imagen médica de forma coordinada."
}

UserStory AnonimizarImagen {
    As a "Especialista en Privacidad"
        I want to "ejecutar" a "Anonimizar"
    so that "pueda eliminar información sensible de pacientes en las imágenes médicas."
}

UserStory GenerarMetadatos {
    As a "Analista de Datos"
        I want to "generar" a "Metadata"
    so that "pueda etiquetar y clasificar las imágenes médicas para facilitar su búsqueda."
}

UserStory CompensacionFallida {
    As a "Ingeniero de Sistemas"
        I want to "ejecutar" a "EliminarAnonimizacion" and "EliminarMetadata"
    so that "pueda revertir cambios parciales cuando falla un proceso de ingesta de imágenes."
}

UserStory ConsultarImagenes {
    As a "Cliente"
        I want to "iniciar" a "ImagenConsultaSaga"
    so that "pueda buscar imágenes médicas que cumplan con criterios demográficos y de modalidad específicos."
}

UserStory ConsultarPorDemografia {
    As a "Investigador Médico"
        I want to "filtrar" a "ImagenDemografia"
    so that "pueda encontrar imágenes de pacientes con características demográficas específicas."
}

UserStory ConsultarPorModalidad {
    As a "Radiólogo"
        I want to "filtrar" a "ImagenModalidad"
    so that "pueda encontrar imágenes de una modalidad y región anatómica específica."
}

UserStory AdministracionDeSubscripciones {
  As an "Administrador"
    I want to "Asignar" a "tipo membresia" to a "Cliente"
    I want to "Actualizar" a "tipo membresia" to a "Cliente"
  so that "pueda controlar el acceso a los servicios de distribución de imágenes."
}

UserStory CrearAmbiente {
    As a "Ingeniero Cloud"
        I want to "provisionar" an "Ambiente"
    so that "los clientes Pro y Enterprise puedan acceder a sus datos en un ambiente dedicado."
}

UserStory MonitorearSeguridad {
    As a "Oficial de Seguridad"
        I want to "revisar" an "Auditoria"
    so that "pueda asegurar el cumplimiento de las normas HIPAA."
}

UserStory CalcularCompensacion {
    As a "Administrador Financiero"
        I want to "generar" a "CompensacionProveedor"
    so that "pueda pagar a los proveedores según el uso de sus imágenes médicas."
}

UserStory MonitorearUsoImagenes {
    As a "Analista de Datos"
        I want to "analizar" a "UsoImagen"
    so that "pueda entender los patrones de uso y optimizar la compensación a proveedores."
}
